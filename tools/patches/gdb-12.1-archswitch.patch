diff -ruN gdb-12.1.orig/gdb/remote.c gdb-12.1/gdb/remote.c
--- gdb-12.1.orig/gdb/remote.c	2023-02-06 09:49:59.893930738 +0100
+++ gdb-12.1/gdb/remote.c	2023-02-06 09:53:41.497714138 +0100
@@ -8463,11 +8463,30 @@
   buf_len = strlen (rs->buf.data ());
 
   /* Further sanity checks, with knowledge of the architecture.  */
-  if (buf_len > 2 * rsa->sizeof_g_packet)
-    error (_("Remote 'g' packet reply is too long (expected %ld bytes, got %d "
-	     "bytes): %s"),
-	   rsa->sizeof_g_packet, buf_len / 2,
-	   rs->buf.data ());
+  if (buf_len > 2 * rsa->sizeof_g_packet) {
+    // HACKFIX for changing architectures for qemu. It's ugly. Don't use, unless you have to.
+    // Updated version for GDB 12 from https://wiki.osdev.org/QEMU_and_GDB_in_long_mode
+    //error (_("Remote 'g' packet reply is too long (expected %ld bytes, got %d "
+	//     "bytes): %s"),
+	//   rsa->sizeof_g_packet, buf_len / 2,
+	//   rs->buf.data ());
+    warning (_("Assuming long-mode change. [Remote 'g' packet reply is too long: %s]"), rs->buf);
+    rsa->sizeof_g_packet = buf_len ;
+
+    for (i = 0; i < gdbarch_num_regs (gdbarch); i++) {
+      if (rsa->regs[i].pnum == -1)
+        continue;
+
+        if (rsa->regs[i].offset >= rsa->sizeof_g_packet)
+          rsa->regs[i].in_g_packet = 0;
+        else
+          rsa->regs[i].in_g_packet = 1;
+      }
+
+      // HACKFIX: Make sure at least the lower half of EIP is set correctly, so the proper
+      // breakpoint is recognized (and triggered).
+      rsa->regs[8].offset = 16*8;
+  }
 
   /* Save the size of the packet sent to us by the target.  It is used
      as a heuristic when determining the max size of packets that the
